/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Component;
import java.awt.Color;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Point;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;

import javax.swing.JComponent;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Ramon
 */
public class LogInDialog extends javax.swing.JDialog {

    /**
     * Creates new form LogInDialog
     */
    public LogInDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.initComponents();
        this.addEvent();
        this.setTabSequence();
        this.setMovable();
        this.setBackground(new Color(0,0,0,0));
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLayeredPane2 = new javax.swing.JLayeredPane();
        passTextField = new javax.swing.JPasswordField();
        userTextField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setIconImages(null);

        passTextField.setText("password");
        passTextField.setBounds(10, 80, 210, 30);
        jLayeredPane2.add(passTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        userTextField.setText("username");
        userTextField.setBounds(10, 40, 210, 30);
        jLayeredPane2.add(userTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        loginButton.setText("log in");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        loginButton.setBounds(223, 40, 60, 70);
        jLayeredPane2.add(loginButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        background.setIcon(Resource.backgroundLogo);
        background.setText("jLabel1");
        background.setBounds(0, 0, 290, 120);
        jLayeredPane2.add(background, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
        );

        this.setUndecorated(true);
        this.pack();
    }// </editor-fold>

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {
    	UIController.logInToGCalendar(userTextField.getText(), passTextField.getPassword());
    	this.dispose();
    }

    
    private static void setLook() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogInDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogInDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogInDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogInDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        setLook();
    	
    	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                LogInDialog dialog = new LogInDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
            }
        });
    }
    
    
    // Variables declaration - do not modify
    private javax.swing.JLabel background;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passTextField;
    private javax.swing.JTextField userTextField;
    // End of variables declaration
    
    private void addEvent() {
    	userTextField.addFocusListener(new FocusAdapter() {
			@Override
			public void focusGained(FocusEvent arg0) {
				userTextField.selectAll();
			}    		
    	});
    	
    	passTextField.addFocusListener(new FocusAdapter() {
    		@Override
    		public void focusGained(FocusEvent arg0) {
    			passTextField.selectAll();
    		}
    	});
    }
    
    private void setTabSequence() {
        setFocusTraversalPolicy(new MyFocusTraversalPolicy());
    }
    
    class MyFocusTraversalPolicy extends FocusTraversalPolicy {

		@Override
		public Component getComponentAfter(Container focusCycleRoot, Component aComponent) {
			if(aComponent.equals(userTextField))
				return passTextField;
			if(aComponent.equals(passTextField))
				return loginButton;
			if(aComponent.equals(loginButton))
				return userTextField;
			return null;
		}

		@Override
		public Component getComponentBefore(Container arg0, Component aComponent) {
			if(aComponent.equals(userTextField))
				return loginButton;
			if(aComponent.equals(passTextField))
				return userTextField;
			if(aComponent.equals(loginButton))
				return passTextField;
			return null;
		}

		@Override
		public Component getDefaultComponent(Container arg0) {
			return userTextField;
		}

		@Override
		public Component getFirstComponent(Container arg0) {
			return userTextField;
		}

		@Override
		public Component getLastComponent(Container arg0) {
			return loginButton;
		}	
    }
    
    
    Point point = new Point();
    
    
    private void setMovable() {
		addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				point.x = e.getX();
				point.y = e.getY();

			}
			@Override
			public void mouseReleased(MouseEvent e) {
			}
		});

		addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				Point p = LogInDialog.this.getLocation();
				LogInDialog.this.setLocation(p.x + e.getX() - point.x, p.y + e.getY() - point.y);				
			}
		});
    }
}
